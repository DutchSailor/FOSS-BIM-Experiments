# WMTS TMS Importer

import urllib.request
import urllib
import xml.etree.ElementTree as ET
import json
import Draft
import Part
from PIL import Image
import requests

import importlib
import GIS2BIM
import GIS2BIM_FreeCAD
import GIS2BIM_NL
importlib.reload(GIS2BIM)

import PySide2
from PySide2 import QtCore, QtGui, QtWidgets
from PySide2.QtGui import*
from PySide2 import  QtUiTools, QtNetwork
from PySide2.QtCore import Qt
import functools

SiteName = "GIS-Sitedata"
TempFolderName = "GIStemp/"
Lat = float(GIS2BIM_FreeCAD.ArchSiteCreateCheck(SiteName).WGS84_Latitude)
Lon = float(GIS2BIM_FreeCAD.ArchSiteCreateCheck(SiteName).WGS84_Longitude)
BoundingboxWidth = float(GIS2BIM_FreeCAD.ArchSiteCreateCheck(SiteName).BoundingboxWidth)
BoundingboxHeight = float(GIS2BIM_FreeCAD.ArchSiteCreateCheck(SiteName).BoundingboxHeight)
Tempfolder = GIS2BIM_FreeCAD.CreateTempFolder(TempFolderName)
TempfileName = Tempfolder + "initialTMS.jpg" 

zoomL = 17
pixels = 256
TMS_WMTS = 0

#Download list of predefined WMTS/TMS Requests
category = "webserverRequests"
service = "WMTS_TMS"
data = GIS2BIM.GetWebServerDataService(category,service)

TitleList  = []
for i in data:
	TitleList.append(i["title"])

ServerRequestPrefix  = []
for i in data:
	ServerRequestPrefix.append(i["serverrequestprefix"])
yx = sorted(zip(TitleList,ServerRequestPrefix))
TitleList = [x[0] for x in yx]
ServerRequestPrefix = [x[1] for x in yx]

class GIS_TMS_Dialog(QtWidgets.QDialog):

	def __init__(self):
		super(GIS_TMS_Dialog, self).__init__()
		self.initUI()
		
	def initUI(self):
		self.result = userCancelled
		self.setWindowTitle("Load Raster Data with WTMS/TMS")
		self.setGeometry(50, 50, 920, 910)
	
		self.centralwidget = QtWidgets.QWidget(self)
		self.centralwidget.setObjectName("WMTS")
		self.pictlabel = QtWidgets.QLabel(self)
		self.zoomLevel = zoomL

		# dx 
		self.dx = QtWidgets.QLineEdit(self)
		self.dx.setInputMask("")
		self.dx.setText("0")
		self.dx.setFixedWidth(100)
		self.dx.move(200, 790)
		self.label6 = QtWidgets.QLabel("X-Placement from origin[m]", self)
		self.label6.move(40, 795)

		# dy 
		self.dy = QtWidgets.QLineEdit(self)
		self.dy.setInputMask("")
		self.dy.setText("0")
		self.dy.setFixedWidth(100)
		self.dy.move(200, 820)
		self.label7 = QtWidgets.QLabel("Y-Placement from origin[m]", self)
		self.label7.move(40, 825)

		#Name of Image
		self.imageName = QtWidgets.QLineEdit(self)
		self.imageName.setInputMask("")
		self.imageName.setText(TitleList[0])
		self.imageName.setFixedWidth(100)
		self.imageName.move(200, 730)
		self.imageNameLabel = QtWidgets.QLabel("Image Name", self)
		self.imageNameLabel.move(40, 735)
		self.imageName.editingFinished.connect(self.onimageName)

		#Zoomlevel
		self.zoomLevel = QtWidgets.QLineEdit(self)
		self.zoomLevel.setText("18")
		self.zoomLevel.setFixedWidth(100)
		self.zoomLevel.move(520, 730)
		self.zoomLevelLab = QtWidgets.QLabel("Zoom Level(1-18)", self)
		self.zoomLevelLab.move(350, 735)

		#Filelocation 
		self.filelocation = TempfileName
		self.foldername = Tempfolder
		def do_file():
			self.fname = QtWidgets.QFileDialog.getExistingDirectory(self, "Open Directory",Tempfolder,QtWidgets.QFileDialog.ShowDirsOnly | QtWidgets.QFileDialog.DontResolveSymlinks)
			self.foldername = fname	
			self.filelocation = self.foldername + "/" + self.imageName.text() + ".jpg"
		self.button = QtWidgets.QPushButton("Browse",self)
		self.button.clicked.connect(do_file)
		self.button.show()
		self.button.move(195, 755)
		self.label8 = QtWidgets.QLabel("Folder for temporary files", self)
		self.label8.move(40, 765)

		# combobox with WMTS-servers
		self.cbo = QtWidgets.QComboBox(self)
		self.cbo.autoCompletion()
		self.cbo.move(520,760)
		self.cbo.addItems(TitleList)
		self.labelWMS = QtWidgets.QLabel("Predifined TMS Requests", self)
		self.labelWMS.move(350, 765)
		self.cbo.currentIndexChanged.connect(self.selectionchange)
		
		# webservernameAndRequest
		self.webserverName1 = QtWidgets.QPlainTextEdit(self)
		self.webserverName1.insertPlainText(ServerRequestPrefix[0])
		self.webserverName1.setFixedWidth(300)
		self.webserverName1.setFixedHeight(80)
		self.webserverName1.move(515, 790)
		self.label1 = QtWidgets.QLabel("TMS Webserver ", self)
		self.label1.move(350, 795)

		# test TMS button
		testTMSButton = QtWidgets.QPushButton('Test TMS-request and show result', self)
		testTMSButton.clicked.connect(self.test_TMS)
		testTMSButton.move(280, 870)

		# cancel button
		cancelButton = QtWidgets.QPushButton('Cancel', self)
		cancelButton.clicked.connect(self.onCancel)
		cancelButton.setAutoDefault(True)
		cancelButton.move(190, 870)

		# Ok TMS button
		okButton = QtWidgets.QPushButton('OK and import image', self)
		okButton.clicked.connect(self.onOk)
		okButton.move(35, 870)
		self.show()
		self.test_TMS()

	def onCancel(self):
		self.result= userCancelled
		self.close()
	
	def onimageName(self): 
		self.filelocation = self.foldername + "/" + self.imageName.text() + ".jpg"

	def selectionchange(self): 
		self.webserverName1.clear()		
		self.webserverName1.insertPlainText(ServerRequestPrefix[self.cbo.currentIndex()])
		self.imageName.clear()
		self.imageName.setText(self.cbo.currentText())

	def test_TMS(self):
		ServerName = self.webserverName1.toPlainText()
		TMS = GIS2BIM.TMS_WMTSCombinedMapFromLatLonBbox(Lat,Lon,BoundingboxWidth,BoundingboxHeight,int(self.zoomLevel.text()),pixels,TMS_WMTS,ServerName)
		self.filelocation = self.foldername + "/" + self.imageName.text() + ".jpg"		
		TMSImage = TMS[0].save(self.filelocation)		
		picture = QPixmap(self.filelocation)
		picture = picture.scaledToWidth(800)
		pictheight = picture.height()
		if pictheight > 600:
			scale = 600/pictheight
			pictheight = 600
			pictwidth = 800*scale
			picture = picture.scaledToWidth(pictwidth)
		else:
			pictwidth = 800			
			pictheight = pictheight
			picture = picture.scaledToWidth(pictwidth)
		self.pictlabel.setPixmap(picture)
		self.pictlabel.setGeometry(QtCore.QRect(40, 40, pictwidth-40, pictheight-40))
		self.pictlabel.hide()
		self.pictlabel.show()
		self.result= userTest

	def onOk(self):
		self.result= userOK
		self.close()

# Constant definitions
userCancelled = "Cancelled"
userOK = "OK"
userTest = "test_TMS"

form = GIS_TMS_Dialog()
form.exec_()

if form.result==userCancelled:
	pass # steps to handle user clicking Cancel
if form.result==userOK:
	URL = str(form.webserverName1.toPlainText())
	dx = float(form.dx.text())*1000
	dy = float(form.dy.text())*1000
	fileLocationTMS = str(form.filelocation)
	ServerName = form.webserverName1.toPlainText()
	TMS = GIS2BIM.TMS_WMTSCombinedMapFromLatLonBbox(Lat,Lon,BoundingboxWidth,BoundingboxHeight,int(form.zoomLevel.text()),pixels,TMS_WMTS,ServerName)
	TMSImage = TMS[0].save(fileLocationTMS)		
	ImageMap = GIS2BIM_FreeCAD.ImportImage(fileLocationTMS,BoundingboxWidth,BoundingboxHeight,1000, str(form.imageName.text()), dx,dy)
	TMS_layer = GIS2BIM_FreeCAD.CreateLayer("GIS_Raster")
	App.activeDocument().getObject("GIS_Raster").addObject(App.activeDocument().getObject(ImageMap.Label))
	FreeCAD.ActiveDocument.recompute()
