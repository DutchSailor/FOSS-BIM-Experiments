# WMS Importer

import urllib.request
import urllib
import xml.etree.ElementTree as ET
import json
import Draft
import Part

import importlib
import GIS2BIM
import GIS2BIM_FreeCAD
import GIS2BIM_NL
importlib.reload(GIS2BIM_FreeCAD)

import PySide2
from PySide2 import QtCore, QtGui, QtWidgets
from PySide2.QtGui import*
from PySide2 import  QtUiTools, QtNetwork
from PySide2.QtCore import Qt
import functools

SiteName = "GIS-Sitedata"
TempFolderName = "GIStemp/"
X = str(GIS2BIM_FreeCAD.ArchSiteCreateCheck(SiteName).CRS_x)
Y = str(GIS2BIM_FreeCAD.ArchSiteCreateCheck(SiteName).CRS_y)
CRS = str(GIS2BIM_FreeCAD.ArchSiteCreateCheck(SiteName).CRS_EPSG_SRID)
CRS_Description = str(GIS2BIM_FreeCAD.ArchSiteCreateCheck(SiteName).CRS_EPSG_Description)
BoundingboxWidth = str(GIS2BIM_FreeCAD.ArchSiteCreateCheck(SiteName).BoundingboxWidth)
BoundingboxHeight = str(GIS2BIM_FreeCAD.ArchSiteCreateCheck(SiteName).BoundingboxHeight)
Tempfolder = GIS2BIM_FreeCAD.CreateTempFolder(TempFolderName)
TempfileName = Tempfolder + "initialWMS.jpg" 

#Download list of predefined WMS Requests
category = "webserverRequests"
service = "WMS"
data = GIS2BIM.GetWebServerDataService(category,service)

TitleList  = []
for i in data:
	TitleList.append(i["title"])

ServerRequestPrefix  = []
for i in data:
	ServerRequestPrefix.append(i["serverrequestprefix"])
yx = sorted(zip(TitleList,ServerRequestPrefix))
TitleList = [x[0] for x in yx]
ServerRequestPrefix = [x[1] for x in yx]

class GISWMS_Dialog(QtWidgets.QDialog):

	def __init__(self):
		super(GISWMS_Dialog, self).__init__()
		self.initUI()
		
	def initUI(self):
		self.result = userCancelled
		self.setWindowTitle("Load Raster Data with WMS(Web Map Server)")
		self.setGeometry(50, 50, 920, 910)
	
		self.centralwidget = QtWidgets.QWidget(self)
		self.centralwidget.setObjectName("WMS")
		self.pictlabel = QtWidgets.QLabel(self)
		
		# note set
		self.labelnote = QtWidgets.QLabel("Note: Use Geographic Location to obtain CRS and coordinates from map", self)
		self.labelnote.move(40, 620)

		#CRS
		self.labelCRS = QtWidgets.QLabel("CRS", self)
		self.labelCRS.move(40, 645)
		self.CRS = QtWidgets.QLabel(CRS + " " + CRS_Description, self)
		self.CRS.move(200, 645)

		#X-coordinate
		self.numericInput1X = QtWidgets.QLineEdit(self)
		self.numericInput1X.setInputMask("")
		self.numericInput1X.setText(X)
		self.numericInput1X.setFixedWidth(100)
		self.numericInput1X.move(200, 670)
		self.label2 = QtWidgets.QLabel("X-coordinate", self)
		self.label2.move(40, 675)
		
		#Y-coordinate		
		self.numericInput2Y = QtWidgets.QLineEdit(self)
		self.numericInput2Y.setInputMask("")
		self.numericInput2Y.setText(Y)
		self.numericInput2Y.setFixedWidth(100)
		self.numericInput2Y.move(200, 700)
		self.label3 = QtWidgets.QLabel("Y-coordinate", self)
		self.label3.move(40, 705)
		
		# boundingbox width
		self.boundingboxwidth = QtWidgets.QLineEdit(self)
		self.boundingboxwidth.setInputMask("")
		self.boundingboxwidth.setText(BoundingboxWidth)
		self.boundingboxwidth.setFixedWidth(100)
		self.boundingboxwidth.move(200, 730)
		self.label4 = QtWidgets.QLabel("Boundingbox Width [m]", self)
		self.label4.move(40, 735)

		# boundingbox height
		self.boundingboxheight = QtWidgets.QLineEdit(self)
		self.boundingboxheight.setInputMask("")
		self.boundingboxheight.setText(BoundingboxHeight)
		self.boundingboxheight.setFixedWidth(100)
		self.boundingboxheight.move(200, 760)
		self.label5 = QtWidgets.QLabel("Boundingbox Height [m]", self)
		self.label5.move(40, 765)

		# dx 
		self.dx = QtWidgets.QLineEdit(self)
		self.dx.setInputMask("")
		self.dx.setText("0")
		self.dx.setFixedWidth(100)
		self.dx.move(200, 790)
		self.label6 = QtWidgets.QLabel("X-Placement from origin[m]", self)
		self.label6.move(40, 795)

		# dy 
		self.dy = QtWidgets.QLineEdit(self)
		self.dy.setInputMask("")
		self.dy.setText("0")
		self.dy.setFixedWidth(100)
		self.dy.move(200, 820)
		self.label7 = QtWidgets.QLabel("Y-Placement from origin[m]", self)
		self.label7.move(40, 825)

		#Name of Image
		self.imageName = QtWidgets.QLineEdit(self)
		self.imageName.setInputMask("")
		self.imageName.setText(TitleList[0])
		self.imageName.setFixedWidth(100)
		self.imageName.move(520, 670)
		self.imageNameLabel = QtWidgets.QLabel("Image Name", self)
		self.imageNameLabel.move(350, 675)
		self.imageName.editingFinished.connect(self.onimageName)

		#Filelocation 
		self.filelocation = TempfileName
		def do_file():
			self.fname = QtWidgets.QFileDialog.getExistingDirectory(self, "Open Directory",Tempfolder,QtWidgets.QFileDialog.ShowDirsOnly | QtWidgets.QFileDialog.DontResolveSymlinks)
			self.foldername = fname	
			self.filelocation = self.foldername + "/" + self.imageName.text() + ".jpg"
		self.button = QtWidgets.QPushButton("Browse",self)
		self.button.clicked.connect(do_file)
		self.button.show()
		self.button.move(515, 695)
		self.label8 = QtWidgets.QLabel("Folder for temporary files", self)
		self.label8.move(350, 705)

		# pixel width
		self.pixelwidth = QtWidgets.QLineEdit(self)
		self.pixelwidth.setInputMask("")
		self.pixelwidth.setText("3000")
		self.pixelwidth.setFixedWidth(70)
		self.pixelwidth.move(520, 730)
		self.labelpixwidth = QtWidgets.QLabel("Pixels in Width", self)
		self.labelpixwidth.move(350, 735)

		# combobox with WMS-servers
		self.cbo = QtWidgets.QComboBox(self)
		self.cbo.autoCompletion()
		self.cbo.move(520,760)
		self.cbo.addItems(TitleList)
		self.labelWMS = QtWidgets.QLabel("Predifined WMS Requests", self)
		self.labelWMS.move(350, 765)
		self.cbo.currentIndexChanged.connect(self.selectionchange)
		
		# webservernameAndRequest
		self.webserverName1 = QtWidgets.QPlainTextEdit(self)
		self.webserverName1.insertPlainText(ServerRequestPrefix[self.cbo.currentIndex()])
		self.webserverName1.setFixedWidth(300)
		self.webserverName1.setFixedHeight(80)
		self.webserverName1.move(515, 790)
		self.label1 = QtWidgets.QLabel("Webserver Address & Request", self)
		self.label1.move(350, 795)

		# test WMS button
		testWMSButton = QtWidgets.QPushButton('Test WMS-request and show result', self)
		testWMSButton.clicked.connect(self.testWMS)
		testWMSButton.move(280, 870)

		# cancel button
		cancelButton = QtWidgets.QPushButton('Cancel', self)
		cancelButton.clicked.connect(self.onCancel)
		cancelButton.setAutoDefault(True)
		cancelButton.move(190, 870)

		# Ok WMS button
		okButton = QtWidgets.QPushButton('OK and import image', self)
		okButton.clicked.connect(self.onOk)
		okButton.move(35, 870)
		self.show()
		self.testWMS()

	def onCancel(self):
		self.result= userCancelled
		self.close()
	
	def onimageName(self): 
		self.filelocation = self.foldername + "/" + self.imageName.text() + ".jpg"

	def selectionchange(self): 
		self.webserverName1.clear()		
		self.webserverName1.insertPlainText(ServerRequestPrefix[self.cbo.currentIndex()])
		self.imageName.clear()
		self.imageName.setText(self.cbo.currentText())

	def testWMS(self):
		URL = str(self.webserverName1.toPlainText())
		X = float(self.numericInput1X.text())
		Y = float(self.numericInput2Y.text())
		dx = float(self.dx.text())
		dy = float(self.dy.text())
		width = float(self.boundingboxwidth.text())
		height = float(self.boundingboxheight.text())
		fileLocationWMS = str(self.filelocation)
		pixWidth = float(self.pixelwidth.text())
		self.pixHeight = int((pixWidth*height)/width)
		pixHeight = self.pixHeight
		Bbox = GIS2BIM.CreateBoundingBox(X,Y,width,height,2)
		WMSRequest = GIS2BIM.WMSRequest(URL,Bbox,TempfileName,pixWidth,pixHeight)
		picture = QPixmap(fileLocationWMS)
		picture = picture.scaledToWidth(800)
		pictheight = picture.height()
		if pictheight > 600:
			scale = 600/pictheight
			pictheight = 600
			pictwidth = 800*scale
			picture = picture.scaledToWidth(pictwidth)
		else:
			pictwidth = 800			
			pictheight = pictheight
			picture = picture.scaledToWidth(pictwidth)
		self.pictlabel.setPixmap(picture)
		self.pictlabel.setGeometry(QtCore.QRect(40, 40, pictwidth-40, pictheight-40))
		self.pictlabel.hide()
		self.pictlabel.show()
		self.result= userTest

	def onOk(self):
		self.result= userOK
		width = float(self.boundingboxwidth.text())
		height = float(self.boundingboxheight.text())
		fileLocationWMS = str(self.filelocation)
		pixWidth = float(self.pixelwidth.text())
		self.pixHeight = (pixWidth*height)/width
		pixHeight = self.pixHeight		
		self.close()

# Constant definitions
userCancelled = "Cancelled"
userOK = "OK"
userTest = "TestWMS"

form = GISWMS_Dialog()
form.exec_()

if form.result==userCancelled:
	pass # steps to handle user clicking Cancel
if form.result==userOK:
	URL = str(form.webserverName1.toPlainText())
	X = float(form.numericInput1X.text())
	Y = float(form.numericInput2Y.text())
	dx = float(form.dx.text())*1000
	dy = float(form.dy.text())*1000
	width = float(form.boundingboxwidth.text())
	height = float(form.boundingboxheight.text())
	fileLocationWMS = str(form.filelocation)
	Bbox = GIS2BIM.CreateBoundingBox(X,Y,width,height,2)
	result = GIS2BIM.WMSRequest(URL,Bbox,fileLocationWMS,form.pixelwidth.text(),int(form.pixHeight))
	
	ImageAerialPhoto = GIS2BIM_FreeCAD.ImportImage(fileLocationWMS,width,height,1000, str(form.imageName.text()), dx,dy)
	ImageAerialPhoto.addProperty("App::PropertyString","WMSRequestURL")
	ImageAerialPhoto.WMSRequestURL = result[2]
	WMS_layer = GIS2BIM_FreeCAD.CreateLayer("GIS_Raster")
	App.activeDocument().getObject("GIS_Raster").addObject(App.activeDocument().getObject(ImageAerialPhoto.Label))
	FreeCAD.ActiveDocument.recompute()