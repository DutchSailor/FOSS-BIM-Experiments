import PySide2
from PySide2 import QtCore, QtGui, QtWidgets

####import for WebPage
from PySide2.QtWebEngineWidgets import QWebEngineView
from PySide2 import  QtUiTools, QtNetwork
from PySide2.QtCore import QUrl
import functools

import GIS2BIM
import GIS2BIM_FreeCAD

SiteName = "GIS2BIM-Sitedata"
X = str(GIS2BIM_FreeCAD.ArchSiteCreateCheck(SiteName).CRS_x)
Y = str(GIS2BIM_FreeCAD.ArchSiteCreateCheck(SiteName).CRS_y)
Lat = str(GIS2BIM_FreeCAD.ArchSiteCreateCheck(SiteName).Latitude)
Long = str(GIS2BIM_FreeCAD.ArchSiteCreateCheck(SiteName).Longitude)
BoundingboxWidth = str(GIS2BIM_FreeCAD.ArchSiteCreateCheck(SiteName).BoundingboxWidth)
BoundingboxHeight = str(GIS2BIM_FreeCAD.ArchSiteCreateCheck(SiteName).BoundingboxHeight)

class GISLocation_Dialog(QtWidgets.QDialog):

	def __init__(self):
		super(GISLocation_Dialog, self).__init__()
		self.initUI()

	def initUI(self):
		self.result = userCancelled
		self.setWindowTitle("Set Geographic Location")
		self.setGeometry(100, 100, 920, 870)
 
		self.centralwidget = QtWidgets.QWidget(self)
		self.centralwidget.setObjectName("map")

		self.webView = QWebEngineView(self.centralwidget)
		self.webView.setGeometry(QtCore.QRect(40, 40, 840, 620))

		self.webView.setUrl(QtCore.QUrl("C:/Users/mikev/OneDrive/Documenten/GitHub/FOSS-BIM-Experiments/GIS2BIM/Examples in development/map.html")) # url your question
		self.webView.setObjectName("webView")
		#self.webView.page()..addToJavaScriptWindowObject("MainWindow", self)
		
		lat = 51.814191
		lon = 4.660176

		QtCore.QMetaObject.connectSlotsByName(self)
		#Lat/Lon
		self.label1 = QtWidgets.QLabel("lat: " + str(lat) , self)
		self.label1.move(50, 25)
		self.label2 = QtWidgets.QLabel("lon: " + str(lon) , self)
		self.label2.move(150, 25)
		self.labelX = QtWidgets.QLabel("X: " + str(X), self)
		self.labelX.move(250, 25)
		self.labelY = QtWidgets.QLabel("Y: " + str(Y), self)
		self.labelY.move(350, 25)

		#Search 
		self.label3 = QtWidgets.QLabel("Project Address:", self)
		self.label3.move(40, 675)

		#
		self.searchline1 = QtWidgets.QPlainTextEdit(self)
		self.searchline1.insertPlainText("Dordrecht")
		self.searchline1.setFixedWidth(400)
		self.searchline1.setFixedHeight(60)
		self.searchline1.move(195, 670)

		# search button
		searchButton = QtWidgets.QPushButton('Search', self)
		searchButton.clicked.connect(self.onSearch)
		searchButton.setAutoDefault(True)
		searchButton.move(600, 670)

		#list of CRS
		self.label4 = QtWidgets.QLabel("Coordinate Reference System", self)
		self.label4.move(40, 735)
		#
		self.searchline1 = QtWidgets.QLineEdit(self)
		self.searchline1.setInputMask("")
		self.searchline1.setText("28992")
		self.searchline1.setFixedWidth(1000)
		self.searchline1.move(200, 730)

		# boundingbox width
		self.boundingboxwidth = QtWidgets.QLineEdit(self)
		self.boundingboxwidth.setInputMask("")
		self.boundingboxwidth.setText(BoundingboxWidth)
		self.boundingboxwidth.setFixedWidth(100)
		self.boundingboxwidth.move(200, 760)
		self.label1 = QtWidgets.QLabel("Boundingbox Width [m]", self)
		self.label1.move(40, 765)

		# boundingbox height
		self.boundingboxheight = QtWidgets.QLineEdit(self)
		self.boundingboxheight.setInputMask("")
		self.boundingboxheight.setText(BoundingboxHeight)
		self.boundingboxheight.setFixedWidth(100)
		self.boundingboxheight.move(200, 790)

		self.label2 = QtWidgets.QLabel("Boundingbox Height [m]", self)
		self.label2.move(40, 795)

		# cancel button
		cancelButton = QtWidgets.QPushButton('Cancel', self)
		cancelButton.clicked.connect(self.onCancel)
		cancelButton.setAutoDefault(True)
		cancelButton.move(120, 820)
		# OK button
		okButton = QtWidgets.QPushButton('OK', self)
		okButton.clicked.connect(self.onOk)
		okButton.move(35, 820)
		self.show()
		# CrossLines
#		pen = QtGui.QPen(QtCore.Qt.red)
#		painter = QtGui.QPainter()
#		painter.setRenderHint(QPainter.Antialiasing)
#		painter.begin(self)
#		painter.setPen(pen)
#		painter.drawLine(0,0,100,100)
		#Pan
#		panToParis = functools.partial(self.panMap, 2.3272, 48.8620)


	def onCancel(self):
		self.result= userCancelled
		self.close()

	def onSearch(self):
		self.result= userOK

	def onOk(self):
		self.result= userOK
		self.close()

	def panMap(self, lng, lat):
		frame = self.webView.page().mainFrame()
		frame.evaluateJavaScript('map.panTo(L.latLng({}, {}));'.format(lat, lng))


	def onLoadFinished(self):
		with open('map.js', 'r') as f:
			frame = self.view.page().mainFrame()
			frame.evaluateJavaScript(f.read())

# Constant definitions
userCancelled		= "Cancelled"
userOK			= "OK"

form = GISLocation_Dialog()
form.exec_()


if form.result==userOK:
	SiteName = "GIS2BIM-Sitedata"
	SiteObject = GIS2BIM_FreeCAD.ArchSiteCreateCheck(SiteName)
	#SiteObject.Longitude = 52.5
	#SiteObject.Latitude = 52.5
	#SiteObject.CRS_x = 104500
	#SiteObject.CRS_y = 405000
	SiteObject.BoundingboxWidth = float(form.boundingboxwidth.text())
	SiteObject.BoundingboxHeight = float(form.boundingboxheight.text())
	#SiteObject.CRS_EPSG_Description = "RD coord"
	#SiteObject.CRS_EPSG_SRID = "28992"