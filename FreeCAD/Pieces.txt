SiteName = "GIS-Site"

def filldata(SiteGIS):
	#buildin
	SiteGIS.Longitude = -46.38
	SiteGIS.Latitude = -23.33
	SiteGIS.Orientation = 1 #True North
	SiteGIS.Address = ""
	SiteGIS.Country = ""
	SiteGIS.City = ""
	SiteGIS.Postal Code = ""

	#added data
	SiteGIS.CRS EPSG SRID = "28992"
	SiteGIS.CRS EPSG Description = "RD"
	SiteGIS.CRS_x = 104000
	SiteGIS.CRS_y = 498000
	SiteGIS.BoundingboxWidth = 400
	SiteGIS.BoundingboxHeight = 400

lstObjects = []
for obj in App.ActiveDocument.Objects:
    lstObjects.append(obj.Label)
if SiteName in lstObjects:
	
else:
    SiteGIS = Arch.makeSite([],[],SiteName)
		
import FreeCAD, Draft, Arch



C:/Users/mikev/OneDrive/Bureaublad/TEMP/GIStemp






def GIS2BIM_TransformCRS_epsg(SourceCRS,TargetCRS,X,Y)
	#transform coordinates between different Coordinate Reference Systems using EPSG-server
	SourceCRS = str(SourceCRS)
	TargetCRS = str(TargetCRS)
	X = str(X)
	Y = str(Y)
	requestURL = "http://epsg.io/trans?" + "&s_srs=" + SourceCRS + "&t_srs=" + TargetCRS + "&x=" + X + "&y=" + Y + "&format=json&trans=1&callback=jsonpFunction"
	return requestURL
	
GIS2BIM_TransformCRS_epsg(4326,28992,104000,450000)












var map = L.map('map').setView([51.505, -0.09], 13);

L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
}).addTo(map);

L.marker([51.5, -0.09]).addTo(map)
    .bindPopup('A pretty CSS3 popup.<br> Easily customizable.')
    .openPopup();
	
	
https://srinikom.github.io/pyside-docs/PySide/QtWebKit/index.html



layer1 = Draft.make_layer()
layer1.Label = "GIS 2D Cadastral Parcels"
layer1 = Draft.make_layer()
layer1.Label = "GIS 2D Building Outlines"
layer1 = Draft.make_layer()
layer1.Label = "GIS 2D Building Countour Destination Plan"
layer1 = Draft.make_layer()
layer1.Label = "GIS Annotations"
layer1 = Draft.make_layer()
layer1.Label = "GIS 3D Builings"
layer1 = Draft.make_layer()
layer1.Label = "GIS Aerialphoto"

FreeCAD.ActiveDocument.recompute()



import FreeCAD

doc = FreeCAD.ActiveDocument

pcube = doc.addObject("Part::Box")

pcube.Length = 10000
pcube.Width = 10000
pcube.Height = 50000

obj = doc.addObject("App::DocumentObjectGroup", "Group2")

obj.addObjects([pcube])

FreeCAD.ActiveDocument.recompute()


import FreeCAD,FreeCADGui,Part
 
# CHANGE THE LINE BELOW
path_to_ui = "C:/Users/yorik/Documents/dialog.ui"
 
class BoxTaskPanel:
   def __init__(self):
       # this will create a Qt widget from our ui file
       self.form = FreeCADGui.PySideUic.loadUi(path_to_ui)
 
   def accept(self):
       length = self.form.BoxLength.value()
       width = self.form.BoxWidth.value()
       height = self.form.BoxHeight.value()
       if (length == 0) or (width == 0) or (height == 0):
           print("Error! None of the values can be 0!")
           # we bail out without doing anything
           return
       box = Part.makeBox(length,width,height)
       Part.show(box)
       FreeCADGui.Control.closeDialog()
        
panel = BoxTaskPanel()
FreeCADGui.Control.showDialog(panel)



import math

#The inputs to this node will be stored as a list in the IN variables.
dataEnteringNode = IN
lat = IN[0]
long = IN[1]
width = IN[2]



import Draft
a = [FreeCAD.Vector(0,0,0),FreeCAD.Vector(0,1000,0)]
b = Draft.makeWire(a, closed=false)
		
		
"C:/Users/mikev/OneDrive/Bureaublad/TEMP/GIStemp/map.html"
		